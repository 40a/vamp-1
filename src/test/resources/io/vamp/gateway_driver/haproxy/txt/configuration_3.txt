global
  pidfile /opt/vamp/haproxy.pid
  daemon
  maxconn 4096
  log /opt/vamp/haproxy.log.sock local0



 defaults
   log global
   mode http
   option dontlognull
   option redispatch
   option clitcpka
   option srvtcpka
   option http-keep-alive

   retries 3
   maxconn 500000

   # slowloris protection: clients should send their full http request in the configured time
   timeout http-request 5s

   timeout connect 5000ms
   timeout client 50000ms
   timeout server 50000ms

listen stats :1988
   mode http
   stats enable
   stats uri /
   stats refresh 2s
   stats realm Haproxy\ Stats
   stats auth haproxy:haproxy

### BEGIN GENERATED SECTION ###

frontend vamp_sava_port

    bind 0.0.0.0:33000



     option tcplog


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {"ci":"%ci","cp":%cp,"t":"%t","ft":"%ft","b":"%b","s":"%s","Tw":%Tw,"Tc":%Tc,"Tt":%Tt,"B":%B,"ts":"%ts","ac":%ac,"fc":%fc,"bc":%bc,"sc":%sc,"rc":%rc,"sq":%sq,"bq":%bq}

    #
    ###



    mode tcp


    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #



    default_backend vamp_sava_port


frontend vamp_sava_sava_1_0_0_port



     option tcplog


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {"ci":"%ci","cp":%cp,"t":"%t","ft":"%ft","b":"%b","s":"%s","Tw":%Tw,"Tc":%Tc,"Tt":%Tt,"B":%B,"ts":"%ts","ac":%ac,"fc":%fc,"bc":%bc,"sc":%sc,"rc":%rc,"sq":%sq,"bq":%bq}

    #
    ###


    bind unix@/opt/vamp/43db76fcd665d7fbbaf939cf00b919ae487c28e3.sock accept-proxy


    mode tcp


    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #



    default_backend vamp_sava_sava_1_0_0_port






backend vamp_sava_port
    mode tcp
#
# Regular HTTP/TCP backends
#


    balance leastconn




        server vamp_sava_sava_1_0_0_port unix@/opt/vamp/43db76fcd665d7fbbaf939cf00b919ae487c28e3.sock send-proxy weight 100






backend vamp_sava_sava_1_0_0_port
    mode tcp
#
# Regular HTTP/TCP backends
#


    balance leastconn



    option forwardfor




        server 64435a223bddf1fa589135baa5e228090279c032 192.168.99.100:32768  weight 100 maxconn 1000
















#backend abusers
#    mode http
#    errorfile 409 /opt/docker/configuration/error_pages/500rate.http

### END GENERATED SECTION ###
