vamp {

  info {
    message = "Hi, I'm Vamp! How are you?"
    timeout = 3 # seconds, response timeout for each component (e.g. Persistance, Container Driver...)
  }

  stats {
    timeout = 5 # seconds, response timeout for each component
  }

  persistence {
    response-timeout = 5 # seconds

    database {
      type: "elasticsearch" # elasticsearch or in-memory

      elasticsearch {
        url = ${vamp.pulse.elasticsearch.url}
        response-timeout = 5 # seconds, timeout for elasticsearch operations
        index = "vamp-persistence"
      }
    }

    key-value-store {
      type = "zookeeper" # zookeeper, etcd or consul
      base-path = "/vamp"

      zookeeper {
        servers = ""
        session-timeout = 5000
        connect-timeout = 5000
      }

      etcd {
        url = ""
      }

      consul {
        url = ""
      }
    }
  }

  container-driver {
    type = "" # marathon or docker

    docker {
      url = "" # e.g. "https://192.168.99.100:2376"
      certificates = "" # e.g. ""~/.docker/machine/certs/"
      isInRancher = false
    }

    mesos.url = ""
    marathon.url = ""

    response-timeout = 30 # seconds, timeout for container operations
  }

  workflow-driver {
    type = "none" # marathon (daemon), chronos (time and event triggered), or none
                  # it's possible to combine (csv): 'marathon,chronos'
    response-timeout = 30 # seconds, timeout for container operations

    chronos {
      url = ""
    }
  }

  dictionary {
    response-timeout = 5 # seconds, timeout for container operations
  }

  rest-api {
    interface = 0.0.0.0
    host = localhost
    port = 8080

    response-timeout = 10 # seconds, HTTP response timeout

    sse {
      keep-alive-timeout = 15 # seconds, timeout after an empty comment (":\n") will be sent in order keep connection alive
    }
  }

  gateway-driver {
    host = "localhost" # note: host of cluster hosts will have this value (e.g. db.host)
    response-timeout = 30 # seconds, timeout for gateway operations

    haproxy {
      version = "1.6" # 1.5 or 1.6
      tcp-log-format  = """{\"ci\":\"%ci\",\"cp\":%cp,\"t\":\"%t\",\"ft\":\"%ft\",\"b\":\"%b\",\"s\":\"%s\",\"Tw\":%Tw,\"Tc\":%Tc,\"Tt\":%Tt,\"B\":%B,\"ts\":\"%ts\",\"ac\":%ac,\"fc\":%fc,\"bc\":%bc,\"sc\":%sc,\"rc\":%rc,\"sq\":%sq,\"bq\":%bq}"""
      http-log-format = """{\"ci\":\"%ci\",\"cp\":%cp,\"t\":\"%t\",\"ft\":\"%ft\",\"b\":\"%b\",\"s\":\"%s\",\"Tq\":%Tq,\"Tw\":%Tw,\"Tc\":%Tc,\"Tr\":%Tr,\"Tt\":%Tt,\"ST\":%ST,\"B\":%B,\"CC\":\"%CC\",\"CS\":\"%CS\",\"tsc\":\"%tsc\",\"ac\":%ac,\"fc\":%fc,\"bc\":%bc,\"sc\":%sc,\"rc\":%rc,\"sq\":%sq,\"bq\":%bq,\"hr\":\"%hr\",\"hs\":\"%hs\",\"r\":%{+Q}r}"""
    }

    logstash {
      index = "logstash-*"
    }

    kibana {
      enabled = true
      elasticsearch.url = ${vamp.pulse.elasticsearch.url}
      synchronization.period = 5 # seconds, synchronization will be active only if period is greater than 0
    }

    aggregation {
      window = 30 # seconds, aggregation will be active only if than 0
      period = 5  # refresh period in seconds, aggregation will be active only if greater than 0
    }
  }

  pulse {
    elasticsearch {
      url = "http://localhost:9200"
      index {
        name = "vamp-pulse"
        time-format.event = "YYYY-MM-dd"
      }
    }
    response-timeout = 30 # seconds, timeout for pulse operations
  }

  operation {

    synchronization {

      initial-delay = 5 # seconds
      period = 6 # seconds, synchronization will be active only if period is greater than 0

      mailbox {
        // Until we get available akka.dispatch.NonBlockingBoundedMailbox
        mailbox-type = "akka.dispatch.BoundedMailbox"
        mailbox-capacity = 10
        mailbox-push-timeout-time = 0s
      }

      timeout {
        ready-for-deployment =  600 # seconds
        ready-for-undeployment =  600 # seconds
      }
    }

    deployment {
      scale {         # default scale, if not specified in blueprint
        instances: 1
        cpu: 1
        memory: 1GB
      }

      arguments: []   # split by first '='
    }

    gateway {
      port-range = 40000-45000
      response-timeout = 5 # seconds, timeout for container operations
    }

    sla.period = 5 # seconds, sla monitor period
    escalation.period = 5 # seconds, escalation monitor period

    workflow {
      container-image: ""
      command: ""
      scale {         # default scale, if not specified in blueprint
        instances: 1
        cpu: 0.2
        memory: 128MB
      }
    }
  }

  lifter {

    pulse.enabled = true

    kibana.enabled = true

    persistence.enabled = true

    vamp-gateway-agent {

      enabled = false

      synchronization {

        initial-delay = 5 # seconds
        period = 30 # seconds, synchronization will be active only if period is greater than 0

        container-image: ""
        container-arguments: []

        mailbox {
          // Until we get available akka.dispatch.NonBlockingBoundedMailbox
          mailbox-type = "akka.dispatch.BoundedMailbox"
          mailbox-capacity = 1
          mailbox-push-timeout-time = 0s
        }
      }
    }
  }
}

akka {

  loglevel = "INFO"
  log-dead-letters = 0
  log-config-on-start = off
  log-dead-letters-during-shutdown = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]

  actor.default-mailbox.mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"

  default-dispatcher.fork-join-executor.pool-size-max = 32
  jvm-exit-on-fatal-error = false
}

spray.can {

  server {
    server-header = ""
    ssl-encryption = off
    pipelining-limit = 1
    idle-timeout = 60 s
    request-timeout = 10 s
    verbose-error-messages = off
    automatic-back-pressure-handling = on
    back-pressure {
      noack-rate = 10
      reading-low-watermark = infinite
    }
    ssl-tracing = off
  }
}
