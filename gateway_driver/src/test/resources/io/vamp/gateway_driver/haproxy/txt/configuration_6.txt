global
  pidfile /opt/vamp/haproxy.pid
  daemon
  maxconn 4096
  log /opt/vamp/haproxy.log.sock local0
  stats socket /opt/vamp/haproxy.stats.sock level admin

 defaults
   log global
   mode http
   option dontlognull
   option redispatch
   option clitcpka
   option srvtcpka
   option http-keep-alive

   retries 3
   maxconn 500000

   # slowloris protection: clients should send their full http request in the configured time
   timeout http-request 5s

   timeout connect 5000ms
   timeout client 50000ms
   timeout server 50000ms

listen stats :1988
   mode http
   stats enable
   stats uri /
   stats refresh 2s
   stats realm Haproxy\ Stats
   stats auth haproxy:haproxy

### BEGIN GENERATED SECTION ###

frontend d5c3c612-6fb3-41e5-8023-292ce3c74924_backend_8080
    
    bind 0.0.0.0:33003
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {"timestamp": %t, "frontend": "%f", "method": "%r", "captured_request_headers": "%hrl", "captures_response_headers": "%hsl"}

    #
    ###

    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend d5c3c612-6fb3-41e5-8023-292ce3c74924_backend_8080


frontend d5c3c612-6fb3-41e5-8023-292ce3c74924_backend_8080::sava-backend:1.3.0
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {"timestamp": %t, "frontend": "%f", "method": "%r", "captured_request_headers": "%hrl", "captures_response_headers": "%hsl"}

    #
    ###

    
    bind unix@/opt/docker/data/672003d66ed7c9b0c8a02cac65811b44457c2d95.sock accept-proxy
    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend d5c3c612-6fb3-41e5-8023-292ce3c74924_backend_8080::sava-backend:1.3.0


frontend d5c3c612-6fb3-41e5-8023-292ce3c74924_sava_8080
    
    bind 0.0.0.0:33002
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {"timestamp": %t, "frontend": "%f", "method": "%r", "captured_request_headers": "%hrl", "captures_response_headers": "%hsl"}

    #
    ###

    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend d5c3c612-6fb3-41e5-8023-292ce3c74924_sava_8080


frontend d5c3c612-6fb3-41e5-8023-292ce3c74924_sava_8080::sava-frontend:1.3.0
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {"timestamp": %t, "frontend": "%f", "method": "%r", "captured_request_headers": "%hrl", "captures_response_headers": "%hsl"}

    #
    ###

    
    bind unix@/opt/docker/data/4b4471b11e0d48d599f3788a43b31c37c350ecdc.sock accept-proxy
    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend d5c3c612-6fb3-41e5-8023-292ce3c74924_sava_8080::sava-frontend:1.3.0


frontend d5c3c612-6fb3-41e5-8023-292ce3c74924_9050
    
    bind 0.0.0.0:9050
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {"timestamp": %t, "frontend": "%f", "method": "%r", "captured_request_headers": "%hrl", "captures_response_headers": "%hsl"}

    #
    ###

    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend d5c3c612-6fb3-41e5-8023-292ce3c74924_9050


frontend d5c3c612-6fb3-41e5-8023-292ce3c74924_9050::sava.port
    

     option httplog 
    


    ###
    #
    # Set logging and set the headers to capture

    # capture request header X-Vamp-Server-CurrentTime len 50
    # capture response header X-Vamp-Server-ResponseTime len 50
    # capture response header X-Vamp-Server-Name len 50


    log-format {"timestamp": %t, "frontend": "%f", "method": "%r", "captured_request_headers": "%hrl", "captures_response_headers": "%hsl"}

    #
    ###

    
    bind unix@/opt/docker/data/599bb91c23e5f09b6cd656389aca83d03543c9ef.sock accept-proxy
    

    mode http
    

    ###
    #
    # Spike/Rate Limiting & Quota Management
    #
    # We use a stick table to keep track of TCP connections rates and bytes send out.
    # On these metrics we set rules to designate upper limits. When limits are hit
    # we reroute the traffic to a specific abusers backend

     # end HTTP spike limit generation

     # end spike limit generation

    ###
    # Filter Management
    #
    # set filters with optional negation
    #

    

    default_backend d5c3c612-6fb3-41e5-8023-292ce3c74924_9050::sava.port






backend d5c3c612-6fb3-41e5-8023-292ce3c74924_backend_8080
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    
        server d5c3c612-6fb3-41e5-8023-292ce3c74924_backend_8080::sava-backend:1.3.0 unix@/opt/docker/data/672003d66ed7c9b0c8a02cac65811b44457c2d95.sock send-proxy weight 100
    





backend d5c3c612-6fb3-41e5-8023-292ce3c74924_backend_8080::sava-backend:1.3.0
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    option forwardfor
   

   http-response set-header X-Vamp-Server-Name %s
   http-response set-header X-Vamp-Server-ResponseTime %t

   

    cookie vamp_srv insert indirect nocache httponly maxidle 5m maxlife 1h 
    
        server 57c4e3d2cbb8f0db907f5e16ceed9a4241d7e117 192.168.99.100:32770  cookie 57c4e3d2cbb8f0db907f5e16ceed9a4241d7e117  weight 100 maxconn 1000  
    
    
    
    
    
    
    
    
    
    
    





backend d5c3c612-6fb3-41e5-8023-292ce3c74924_sava_8080
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    
        server d5c3c612-6fb3-41e5-8023-292ce3c74924_sava_8080::sava-frontend:1.3.0 unix@/opt/docker/data/4b4471b11e0d48d599f3788a43b31c37c350ecdc.sock send-proxy weight 100
    





backend d5c3c612-6fb3-41e5-8023-292ce3c74924_sava_8080::sava-frontend:1.3.0
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    option forwardfor
   

   http-response set-header X-Vamp-Server-Name %s
   http-response set-header X-Vamp-Server-ResponseTime %t

   

    cookie vamp_srv insert indirect nocache httponly maxidle 5m maxlife 1h 
    
        server f1638245acf2ebe6db56984a85b48f6db8c74607 192.168.99.100:32771  cookie f1638245acf2ebe6db56984a85b48f6db8c74607  weight 100 maxconn 1000  
    
    
    
    
    
    
    
    
    
    
    





backend d5c3c612-6fb3-41e5-8023-292ce3c74924_9050
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    
        server d5c3c612-6fb3-41e5-8023-292ce3c74924_9050::sava.port unix@/opt/docker/data/599bb91c23e5f09b6cd656389aca83d03543c9ef.sock send-proxy weight 100
    





backend d5c3c612-6fb3-41e5-8023-292ce3c74924_9050::sava.port
    mode http
#
# Regular HTTP/TCP backends
#

    balance roundrobin 
   



    option forwardfor
   

   http-response set-header X-Vamp-Server-Name %s
   http-response set-header X-Vamp-Server-ResponseTime %t

   

    cookie vamp_srv insert indirect nocache httponly maxidle 5m maxlife 1h 
    
        server d5c3c612-6fb3-41e5-8023-292ce3c74924_9050 192.168.99.100:33002  cookie d5c3c612-6fb3-41e5-8023-292ce3c74924_9050  weight 100 maxconn 1000  
    
    
    
    
    
    
    
    
    
    
    





#backend abusers
#    mode http
#    errorfile 409 /opt/docker/configuration/error_pages/500rate.http

### END GENERATED SECTION ###